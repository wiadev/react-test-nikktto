{"version":3,"sources":["redux/reducers/rootReducer.js","redux/reducers/styleReducer.js","redux/initialState.js","redux/actions/styleAction.js","components/Control.js","components/Element.js","App.js","serviceWorker.js","index.js","redux/store.js"],"names":["combineReducers","style","state","arguments","length","undefined","action","type","Object","objectSpread","defineProperty","payload","id","initialStore","element_01","borderColor","borderWidth","borderStyle","selectedElement","updateStyle","dispatch","borderColors","value","name","borderWidths","borderStyles","Control","handleChange","key","_this$props","_this","props","_this2","this","_this$props$style","react_default","a","createElement","className","defaultValue","onChange","e","target","map","bc","parseInt","bw","bs","Component","connect","Element","App","components_Control","components_Element","Boolean","window","location","hostname","match","ReactDOM","render","es","store","createStore","rootReducer","initialState","applyMiddleware","thunk","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37ea34e8.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport style from './styleReducer';\n\nexport default combineReducers({\n\tstyle,\n});\n","export default (state = {}, action) => {\n\tswitch (action.type) {\n\t\tcase 'UPDATE_STYLE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstyle: {\n\t\t\t\t\t...state.style,\n\t\t\t\t\t[action.payload.id]: {\n\t\t\t\t\t\t...state.style[action.payload.id],\n\t\t\t\t\t\t...action.payload.style,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","const initialStore = {\n  style: {\n    style: {\n      'element_01': {\n        borderColor: '#FF0000',\n        borderWidth: 3,\n        borderStyle: 'solid',\n      },\n    },\n    selectedElement: 'element_01',\n  },\n};\n\nexport default initialStore;\n","export const updateStyle = (id, style) => dispatch => {\n\tdispatch({\n\t\ttype: 'UPDATE_STYLE',\n\t\tpayload: {\n\t\t\tid,\n\t\t\tstyle,\n\t\t},\n\t});\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateStyle } from '../redux/actions/styleAction';\nimport '../App.css';\n\nconst borderColors = [{\n  value: '#000000',\n  name: 'Black',\n}, {\n  value: '#FF0000',\n  name: 'Red',\n}, {\n  value: '#0000BB',\n  name: 'Blue',\n}];\n\nconst borderWidths = [1, 2, 3, 4, 5];\n\nconst borderStyles = ['solid', 'dotted', 'double', 'dashed'];\n\nclass Control extends Component {\n  handleChange = (key, value) => {\n    const { dispatch, style } = this.props;\n    dispatch(updateStyle(style.selectedElement, {\n      [key]: value,\n    }));\n  };\n\n  render() {\n    const { style, selectedElement } = this.props.style;\n    return (\n      <div className=\"control\">\n        <div className=\"row\">\n          <div className=\"label\">Element:</div>\n          <select>\n            <option value=\"element_01\">Element 01</option>\n          </select>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"label\">Border Color:</div>\n          <select\n            defaultValue={style[selectedElement]['borderColor']}\n            onChange={(e) => { this.handleChange('borderColor', e.target.value); }}\n           >\n            {borderColors.map(bc => <option value={bc.value} key={bc.value}>{bc.name}</option>)}\n          </select>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"label\">Border Width:</div>\n          <select\n            defaultValue={style[selectedElement]['borderWidth']}\n            onChange={(e) => { this.handleChange('borderWidth', parseInt(e.target.value)); }}\n           >\n            {borderWidths.map(bw => <option value={bw} key={bw}>{bw}</option>)}\n          </select>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"label\">Border Style:</div>\n          <select\n            defaultValue={style[selectedElement]['borderStyle']}\n            onChange={(e) => { this.handleChange('borderStyle', e.target.value); }}\n           >\n            {borderStyles.map(bs => <option value={bs} key={bs}>{bs}</option>)}\n          </select>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  style: state.style,\n});\n\nexport default connect(mapStateToProps)(Control);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../App.css';\n\nclass Element extends Component {\n  render() {\n    const { style } = this.props.style;\n    const { id } = this.props;\n\n    return (\n      <div className=\"element\" style={{...style[id]}}>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  style: state.style,\n});\n\nexport default connect(mapStateToProps)(Element);\n","import React, { Component } from 'react';\nimport Control from './components/Control';\nimport Element from './components/Element';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Control />\n        <Element id=\"element_01\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './redux/store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={configureStore()}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport initialState from './initialState';\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(thunk),\n  );\n}\n"],"sourceRoot":""}